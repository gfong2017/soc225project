ggplot(data = tot_race_pop) +
geom_col(mapping = aes(x = state, y = population, fill = racial_population)) +
ggtitle(label = "Midwest State Populations by Race")
}
})
source('C:/Users/gfong/Desktop/Info201/a7-gfong2017/app_server.R')
#download midwest dataset
library(ggplot2)
library(dplyr)
library(tidyr)
library(reshape)
server <- function(input, output){
output$coll_race <- renderPlot({
race_v_coll <- midwest %>%
select(state, percwhite, percblack,
percamerindan, percasian, percother, percollege)
#creating/ return scatterplot
ggplot(data = race_v_coll) +
geom_point(mapping = aes(x = race_v_coll[[input$race]],
y = percollege, color = state)) +
labs(y = "Percent College Educated", x = input$race) +
coord_cartesian(xlim = c(input$zoomx_min, input$zoomx_max), ylim = c(input$zoomy_min, input$zoomy_max))
})
output$mid_pop <- renderPlot({
if(input$by_race == FALSE){
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = poptotal)
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = tot_pop[[input$states]], y = poptotal) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
}
else{
tot_race_pop <- midwest %>%
select(state, popasian, popwhite,
popother, popblack, popamerindian) %>%
group_by(state) %>%
summarize(popasian = sum(popasian),
popwhite = sum(popwhite),
popblack = sum(popblack),
popamerindian = sum(popamerindian),
popother = sum(popother)) %>%
gather(key = racial_population, value = population, -state)
ggplot(data = tot_race_pop) +
geom_col(mapping = aes(x = state, y = population, fill = racial_population)) +
ggtitle(label = "Midwest State Populations by Race")
}
})
}
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = poptotal)
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = tot_pop[[input$states]], y = poptotal) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = poptotal)
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = tot_pop[[input$states]], y = poptotal) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = poptotal)
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = tot_pop[[input$states]], y = poptotal) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = poptotal)
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = poptotal)
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = poptotal)
View(tot_pop)
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = tot_pop[[input$states]], y = poptotal)) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
library(ggplot2)
library(dplyr)
library(tidyr)
library(reshape)
server <- function(input, output){
output$coll_race <- renderPlot({
race_v_coll <- midwest %>%
select(state, percwhite, percblack,
percamerindan, percasian, percother, percollege)
#creating/ return scatterplot
ggplot(data = race_v_coll) +
geom_point(mapping = aes(x = race_v_coll[[input$race]],
y = percollege, color = state)) +
labs(y = "Percent College Educated", x = input$race) +
coord_cartesian(xlim = c(input$zoomx_min, input$zoomx_max), ylim = c(input$zoomy_min, input$zoomy_max))
})
output$mid_pop <- renderPlot({
if(input$by_race == FALSE){
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = poptotal)
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = tot_pop[[input$states]], y = poptotal)) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
}
else{
tot_race_pop <- midwest %>%
select(state, popasian, popwhite,
popother, popblack, popamerindian) %>%
group_by(state) %>%
summarize(popasian = sum(popasian),
popwhite = sum(popwhite),
popblack = sum(popblack),
popamerindian = sum(popamerindian),
popother = sum(popother)) %>%
gather(key = racial_population, value = population, -state)
ggplot(data = tot_race_pop) +
geom_col(mapping = aes(x = state, y = population, fill = racial_population)) +
ggtitle(label = "Midwest State Populations by Race")
}
})
}
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
source('C:/Users/gfong/Desktop/Info201/a7-gfong2017/app_server.R')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal)) %>%
spread(key = state, value = population)
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
View(server)
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
#download midwest dataset
library(ggplot2)
library(dplyr)
library(tidyr)
library(reshape)
server <- function(input, output){
output$coll_race <- renderPlot({
race_v_coll <- midwest %>%
select(state, percwhite, percblack,
percamerindan, percasian, percother, percollege)
#creating/ return scatterplot
ggplot(data = race_v_coll) +
geom_point(mapping = aes(x = race_v_coll[[input$race]],
y = percollege, color = state)) +
labs(y = "Percent College Educated", x = input$race) +
coord_cartesian(xlim = c(input$zoomx_min, input$zoomx_max), ylim = c(input$zoomy_min, input$zoomy_max))
})
output$mid_pop <- renderPlot({
if(input$by_race == FALSE){
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal))
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = state , y = poptotal, fill = state)) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
}
else{
tot_race_pop <- midwest %>%
select(state, popasian, popwhite,
popother, popblack, popamerindian) %>%
group_by(state) %>%
summarize(popasian = sum(popasian),
popwhite = sum(popwhite),
popblack = sum(popblack),
popamerindian = sum(popamerindian),
popother = sum(popother)) %>%
gather(key = racial_population, value = population, -state)
ggplot(data = tot_race_pop) +
geom_col(mapping = aes(x = state, y = population, fill = racial_population)) +
ggtitle(label = "Midwest State Populations by Race")
}
})
}
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
View(tot_race_pop)
View(tot_race_pop)
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
#download midwest dataset
library(ggplot2)
library(dplyr)
library(tidyr)
library(reshape)
server <- function(input, output){
output$coll_race <- renderPlot({
race_v_coll <- midwest %>%
select(state, percwhite, percblack,
percamerindan, percasian, percother, percollege)
#creating/ return scatterplot
ggplot(data = race_v_coll) +
geom_point(mapping = aes(x = race_v_coll[[input$race]],
y = percollege, color = state)) +
labs(y = "Percent College Educated", x = input$race) +
coord_cartesian(xlim = c(input$zoomx_min, input$zoomx_max), ylim = c(input$zoomy_min, input$zoomy_max))
})
output$mid_pop <- renderPlot({
if(input$by_race == FALSE){
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal))
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = state , y = poptotal, fill = state)) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
}
else{
tot_race_pop <- midwest %>%
select(state, popasian, popwhite,
popother, popblack, popamerindian) %>%
group_by(state) %>%
summarize(popasian = sum(popasian),
popwhite = sum(popwhite),
popblack = sum(popblack),
popamerindian = sum(popamerindian),
popother = sum(popother)) %>%
gather(key = racial_population, value = population, -state) %>%
filter(racial_population == input$choose_race)
ggplot(data = tot_race_pop) +
geom_col(mapping = aes(x = state, y = population, fill = racial_population)) +
ggtitle(label = "Midwest State Populations by Race")
}
})
}
View(tot_race_pop)
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
library(ggplot2)
library(dplyr)
#page that gives the option to see the race distribution
#in each midwestern state
page_coll_race <- tabPanel(
"College vs Race",
titlePanel("College vs. Race"),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "race",
label = "Choose a Racial Group",
choices = c("percwhite", "percblack", "percasian",
"percamerindan", "percother"),
selected = "percwhite"
),
sliderInput(
inputId = "zoomx_max",
label = h3("Zoom X-axis Max"),
min = 0,
max = 100,
value = 100
),
sliderInput(
inputId = "zoomx_min",
label = h3("Zoom X-axis Min"),
min = 0,
max = 100,
value = 0
),
sliderInput(
inputId = "zoomy_max",
label = h3("Zoom Y-axis Max"),
min = 0,
max = 100,
value = 100
),
sliderInput(
inputId = "zoomy_min",
label = h3("Zoom Y-axis Min"),
min = 0,
max = 100,
value = 0
)
),
mainPanel(
plotOutput(outputId = "coll_race")
)
)
)
#page that has a pie chart of the state populations
page_state_pop <- tabPanel(
"Populations of the Midwest",
titlePanel("Populations of the Midwest"),
sidebarLayout(
sidebarPanel(
#view the data broken down by race, not just the total
checkboxInput(
inputId = "by_race",
label = h3("Show populations broken down by race"),
value = FALSE
),
selectInput(
inputId = "choose_race",
label = h3("Choose Race Population"),
choices = c("percwhite", "percblack", "percasian",
"percamerindan", "percother"),
selected = "percwhite"
)
),
mainPanel(
plotOutput(outputId = "mid_pop")
)
)
)
ui <- navbarPage(
"Midwest Interact",
page_coll_race,
page_state_pop
)
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
#download midwest dataset
library(ggplot2)
library(dplyr)
library(tidyr)
library(reshape)
server <- function(input, output){
output$coll_race <- renderPlot({
race_v_coll <- midwest %>%
select(state, percwhite, percblack,
percamerindan, percasian, percother, percollege)
#creating/ return scatterplot
ggplot(data = race_v_coll) +
geom_point(mapping = aes(x = race_v_coll[[input$race]],
y = percollege, color = state)) +
labs(y = "Percent College Educated", x = input$race) +
coord_cartesian(xlim = c(input$zoomx_min, input$zoomx_max), ylim = c(input$zoomy_min, input$zoomy_max))
})
output$mid_pop <- renderPlot({
if(input$by_race == FALSE){
tot_pop <- midwest %>%
select(state, poptotal) %>%
group_by(state) %>%
summarize(poptotal = sum(poptotal))
#create bar graph of the total
ggplot(data = tot_pop) +
geom_col(mapping = aes(x = state , y = poptotal, fill = state)) +
ggtitle(label = "Midwest States Total Population") +
xlab(label = "Midwest State") +
ylab(label = "Total Population")
}
else{
tot_race_pop <- midwest %>%
select(state, popasian, popwhite,
popother, popblack, popamerindian) %>%
group_by(state) %>%
summarize(popasian = sum(popasian),
popwhite = sum(popwhite),
popblack = sum(popblack),
popamerindian = sum(popamerindian),
popother = sum(popother)) %>%
gather(key = racial_population, value = population, -state) %>%
ggplot(data = tot_race_pop) +
geom_col(mapping = aes(x = state, y = population, fill = racial_population)) +
ggtitle(label = "Midwest State Populations by Race")
}
})
}
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
runApp('C:/Users/gfong/Desktop/Info201/a7-gfong2017')
install.packages("shinyWidgets")
shiny::runApp('C:/Users/gfong/Desktop/Info201/final-eguw')
library(shiny)
shiny::runApp('C:/Users/gfong/Desktop/Info201/final-eguw')
runApp('C:/Users/gfong/Desktop/Info201/final-eguw')
setwd("~/")
setwd(/gfong)
setwd("/gfong")
setwd("Users/gfong")
setwd("C:/Users/gfong/Desktop/SOC225/soc225project")
library(tidyverse)
#read-in data for the 20% infections
covid_hospital <- read.csv("data/Covid-report-20.csv")
#deleting the unused first row
covid_hospital<- covid_hospital[-1,]
#changing the converting variables from factors to intended variable type
hospital_data <- covid_hospital %>%
mutate(
HRR = as.character(HRR),
Total.Hospital.Beds = as.numeric(
as.character(
gsub(",", "", Total.Hospital.Beds)
)
)
) %>%
#making a seperate city and state column
separate(HRR,c("City", "state"), sep = ", ") %>%
select(Total.Hospital.Beds, state) %>%
group_by(state)%>%
summarize(total_bed = sum(Total.Hospital.Beds))
hospital_data <- hospital_data[-52, ]
#Plot 1: available beds per state
plot_1<- hospital_data %>%
ggplot(aes(x= state, y = total_bed))+
geom_col()+
labs(title = "Number of Beds Total per State", y= "Total Number Beds") +
theme(axis.text.x = element_text(angle = 90))
plot_1
#set up for plot 2
library(dplyr)
#library(Scale)
covid <- read.csv("data/US_State_Covid_daily.csv")
# set up data for plot with total cases and state
covid_report <- covid %>%
select(state, positiveIncrease)%>%
mutate(state = as.character(state))%>%
na.omit%>%
group_by(state)%>%
summarise(total_cases = sum(positiveIncrease))
# removing rows that are US territories
covid_report <- covid_report[-4, ]
covid_report <- covid_report[-12, ]
covid_report <- covid_report[-26, ]
covid_report <- covid_report[-40, ]
covid_report <- covid_report[-47, ]
#joining data sets
covid_full <- left_join(covid_report, hospital_data)
plot2 <- covid_full %>%
ggplot(aes(x = total_cases, y=total_bed))+
geom_point(alpha = 0.5)+
xlab("Total Number of Cases per State")+
ylab("Total Beds per State")+
labs(title = "COVID-19 in the U.S.: Total Hospital Beds vs. Total Cases") #+
#scale_x_continuous(labels = comma)
plot2
library(Scales)
library(Scale)
#set up for plot 2
library(dplyr)
library(Scale)
covid <- read.csv("data/US_State_Covid_daily.csv")
# set up data for plot with total cases and state
covid_report <- covid %>%
select(state, positiveIncrease)%>%
mutate(state = as.character(state))%>%
na.omit%>%
group_by(state)%>%
summarise(total_cases = sum(positiveIncrease))
#set up for plot 2
library(dplyr)
covid <- read.csv("data/US_State_Covid_daily.csv")
# set up data for plot with total cases and state
covid_report <- covid %>%
select(state, positiveIncrease)%>%
mutate(state = as.character(state))%>%
na.omit%>%
group_by(state)%>%
summarise(total_cases = sum(positiveIncrease))
#set up for plot 2
library(dplyr)
covid <- read.csv("data/US_State_Covid_daily.csv")
# set up data for plot with total cases and state
covid_report <- covid %>%
select(state, positiveIncrease)%>%
mutate(state = as.character(state))%>%
na.omit%>%
group_by(state)%>%
summarise(total_cases = sum(positiveIncrease))
